#Использовать logos
#Использовать 1connector

Перем ВерсияПлагина;
Перем Лог;
Перем КомандыПлагина;
Перем ВызватьОшибку;
Перем ПрефиксЗадачи;
Перем ПаттернЗадачи;
Перем МинимальноеКоличествоЗадач;
Перем МаксимальноеКоличествоЗадач;
Перем ВыводитьПредставление;
Перем ИсправлятьКавычки;
Перем ПроверятьВJira;

#Область Интерфейс_плагина

// Возвращает версию плагина
//
//  Возвращаемое значение:
//   Строка - текущая версия плагина
//
Функция Версия() Экспорт
	Возврат "1.3.1";
КонецФункции

// Возвращает приоритет выполнения плагина
//
//  Возвращаемое значение:
//   Число - приоритет выполнения плагина
//
Функция Приоритет() Экспорт
	Возврат 0;
КонецФункции

// Возвращает описание плагина
//
//  Возвращаемое значение:
//   Строка - описание функциональности плагина
//
Функция Описание() Экспорт
	Возврат "Плагин добавляет функциональность проверки комментариев в хранилище";
КонецФункции

// Возвращает подробную справку к плагину 
//
//  Возвращаемое значение:
//   Строка - подробная справка для плагина
//
Функция Справка() Экспорт
	Возврат "Справка плагина";
КонецФункции

// Возвращает имя плагина
//
//  Возвращаемое значение:
//   Строка - имя плагина при подключении
//
Функция Имя() Экспорт
	Возврат "check-comments";
КонецФункции 

// Возвращает имя лога плагина
//
//  Возвращаемое значение:
//   Строка - имя лога плагина
//
Функция ИмяЛога() Экспорт
	Возврат "oscript.lib.gitsync.plugins.check-comments";
КонецФункции

#КонецОбласти

#Область Подписки_на_события

Процедура ПриРегистрацииКомандыПриложения(ИмяКоманды, КлассРеализации) Экспорт

	Лог.Отладка("Ищу команду <%1> в списке поддерживаемых", ИмяКоманды);
	Если КомандыПлагина.Найти(ИмяКоманды) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Лог.Отладка("Устанавливаю дополнительные параметры для команды %1", ИмяКоманды);

	КлассРеализации.Опция("C error-comment", Ложь, "[*check-comments] Флаг вызова ошибки при отсутствии текста комментария")
					.Флаговый();

	КлассРеализации.Опция("task-prefix", "", "[*check-comments] Префикс задачи.")
					.ВОкружении("GITSYNC_TASK_PREFIX")
					.Обязательный(Ложь);

	КлассРеализации.Опция("task-pattern", "", "[*check-comments] Паттерн задачи.")
					.ВОкружении("GITSYNC_TASK_PATTERN")
					.Обязательный(Ложь);				
			
	КлассРеализации.Опция("min-task-count", 0, СтрШаблон("[*check-comments] Минимальное количество упоминаний задач"))
					.ТЧисло()
					.Обязательный(Ложь);
							
	КлассРеализации.Опция("max-task-count", 0, СтрШаблон("[*check-comments] Максимальное количество упоминаний задач"))
					.ТЧисло()
					.Обязательный(Ложь);

	КлассРеализации.Опция("author-presentation", Ложь, "[*check-comments] Флаг использования представления автора в сообщении об отсутствии комментария")
					.Флаг()
					.ВОкружении("GITSYNC_AUTHOR_PRESENTATION")
					.Обязательный(Ложь);

	КлассРеализации.Опция("repair-quotes", Ложь, "[*check-comments] Флаг замены всех символов кавычек на корректные.")
					.Флаг()
					.ВОкружении("GITSYNC_REPAIR_QUOTES")
					.Обязательный(Ложь);
	КлассРеализации.Опция("jira-status-check", Ложь, "[*check-comments] Флаг проверки статуса задачи в Jira.")
					.Флаг()
					.ВОкружении("jira_status_check")
					.Обязательный(Ложь);	
КонецПроцедуры

Процедура ПриПолученииПараметров(ПараметрыКоманды) Экспорт

	ВызватьОшибку = ПараметрыКоманды.Параметр("error-comment", Ложь);
	
	ВызватьОшибку = Булево(ВызватьОшибку);
	Лог.Отладка("Получаю параметр <error-comment> значение <%1>", ВызватьОшибку);
	
	ПрефиксЗадачи = ПараметрыКоманды.Параметр("task-prefix", "");
	Лог.Отладка("Получаю параметр <task-prefix> значение <%1>", ПрефиксЗадачи);

	ПаттернЗадачи = ПараметрыКоманды.Параметр("task-pattern", "");
	Лог.Отладка("Получаю параметр <task-pattern> значение <%1>", ПаттернЗадачи);
		
	МинимальноеКоличествоЗадач = ПараметрыКоманды.Параметр("min-task-count", 0);
	Лог.Отладка("Получаю параметр <min-task-count> значение <%1>", МинимальноеКоличествоЗадач);
	
	МаксимальноеКоличествоЗадач = ПараметрыКоманды.Параметр("max-task-count", 0);
	Лог.Отладка("Получаю параметр <max-task-count> значение <%1>", МаксимальноеКоличествоЗадач);

	ВыводитьПредставление = ПараметрыКоманды.Параметр("author-presentation", Ложь);
	Лог.Отладка("Получаю параметр <author-presentation> значение <%1>", ВыводитьПредставление);

	ИсправлятьКавычки = Булево(ПараметрыКоманды.Параметр("repair-quotes", Ложь));
	Лог.Отладка("Получаю параметр <repair-quotes> значение <%1>", ИсправлятьКавычки);
	
	ПроверятьВJira = Булево(ПараметрыКоманды.Параметр("jira_status_check", Ложь));
	Лог.Отладка("Получаю параметр <jira_status_check> значение <%1>", ПроверятьВJira);
	
КонецПроцедуры

Процедура ПередОбработкойВерсииХранилища(СтрокаВерсии, СледующаяВерсия) Экспорт

	ПроверитьЗаполненностьКомментария(СтрокаВерсии, СледующаяВерсия);
	
	ПроверитьКомментарийНаНаличиеУпоминанийЗадач(СтрокаВерсии, СледующаяВерсия);
	
	ИсправитьКавычки(СтрокаВерсии);

	ПроверитьЗадачуВJira(СтрокаВерсии, СледующаяВерсия);

КонецПроцедуры

Процедура ПроверитьЗаполненностьКомментария(СтрокаВерсии, СледующаяВерсия)

	Если Не ПустаяСтрока(СтрокаВерсии.Комментарий) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОшибки = СтрШаблон("Версия <%1> от автора <%2>: комментарий не задан", 
							СледующаяВерсия, Автор(СтрокаВерсии));
	Лог.КритичнаяОшибка(СтрокаОшибки);

	Если ВызватьОшибку Тогда

		ВызватьИсключение СтрокаОшибки;

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьКомментарийНаНаличиеУпоминанийЗадач(СтрокаВерсии, СледующаяВерсия)

	Если (ПустаяСтрока(ПрефиксЗадачи) и ПустаяСтрока(ПаттернЗадачи)) Или ПустаяСтрока(СтрокаВерсии.Комментарий) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПаттернЗадачи) Тогда
		РВ = Новый РегулярноеВыражение(ПаттернЗадачи);
		ИспользуемыйШаблон = "соответствующих паттерну """ + ПаттернЗадачи + """";
	Иначе
		РВ = Новый РегулярноеВыражение(СтрШаблон("%1-%2", ПрефиксЗадачи, "\d"));
		ИспользуемыйШаблон = ПрефиксЗадачи;
	КонецЕсли;	
	
	Совпадения = РВ.НайтиСовпадения(СтрокаВерсии.Комментарий); 
	КоличествоВхождений = Совпадения.количество();
	
	Если КоличествоВхождений < МинимальноеКоличествоЗадач Тогда
		СтрокаОшибки = СтрШаблон("Версия <%1> от автора <%2>: количество упоминаний задач %3 (%4) меньше требуемого (%5)", 
							СледующаяВерсия,
							Автор(СтрокаВерсии), ИспользуемыйШаблон, КоличествоВхождений, МинимальноеКоличествоЗадач);
							 
		Лог.КритичнаяОшибка(СтрокаОшибки);
	
		Если ВызватьОшибку Тогда

			ВызватьИсключение СтрокаОшибки;

		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоВхождений > МаксимальноеКоличествоЗадач Тогда
		СтрокаОшибки = СтрШаблон("Версия <%1> от автора <%2>: количество упоминаний задач %3 (%4) больше требуемого (%5)", 
							СледующаяВерсия,
							Автор(СтрокаВерсии), ИспользуемыйШаблон, КоличествоВхождений, МаксимальноеКоличествоЗадач);
							 
		Лог.КритичнаяОшибка(СтрокаОшибки);
	
		Если ВызватьОшибку Тогда

			ВызватьИсключение СтрокаОшибки;

		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьЗадачуВJira (СтрокаВерсии, СледующаяВерсия)
	
	Лог.Отладка("Проверить задачу в Jira: " + ПроверятьВJira);

	Если Не ПроверятьВJira Тогда
		Возврат;
	КонецЕсли;

	РВ = Новый РегулярноеВыражение(СтрШаблон("%1-%2", ПрефиксЗадачи, "\d"));
	Совпадения = РВ.НайтиСовпадения(СтрокаВерсии.Комментарий); 
	Если Совпадения.Количество() = 0 Тогда
		Лог.КритичнаяОшибка("Не удалось найти упоминание задачи в комментарии!");
	КонецЕсли;

	Если не ЗадачаВДопустимомСтатусе(Совпадения[0].Значение) Тогда
		СтрокаОшибки = СтрШаблон("Версия <%1> от автора <%2>: Задача не прошла валидацию в Jira. Добавлять коммиты можно только для задач в статусах MFG_IN PROGRESS и MFG_Test", 
							СледующаяВерсия, Автор(СтрокаВерсии));
		Лог.КритичнаяОшибка(СтрокаОшибки);

		Если ВызватьОшибку Тогда

			ВызватьИсключение СтрокаОшибки;

		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ЗадачаВДопустимомСтатусе(НомерЗадачи)
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить("MFG_IN PROGRESS");
	МассивДопустимыхСтатусов.Добавить("MFG_Test");

	Попытка
		Лог.Отладка("Посылаем запрос в Jira по задаче <%1>", НомерЗадачи);
		Результат = КоннекторHTTP.GetJson("https://jira.melonfashion.ru/rest/api/2/issue/"+НомерЗадачи+"?fields=status&fieldsByKeys=false");	
	Исключение
		Лог.КритичнаяОшибка("Не удалось получить ответ от JIRA по задаче <%1>", НомерЗадачи);
		Возврат Ложь;
	КонецПопытки;
	
	ИмяСтатуса = Результат.fields.status.name;
	Лог.Отладка("Имя статуса: %1", ИмяСтатуса);
    Возврат не МассивДопустимыхСтатусов.Найти(ИмяСтатуса) = Неопределено;
КонецФункции

Процедура ИсправитьКавычки(СтрокаВерсии)

	Лог.Отладка("Исправлять кавычки в комментарии: <%1>", ИсправлятьКавычки);

	Если Не ИсправлятьКавычки Тогда
		Возврат;
	КонецЕсли;

	ХорошаяКавычка = """";

	ПлохиеКавычки = Новый Массив;
	ПлохиеКавычки.Добавить(Символ(8220));
	ПлохиеКавычки.Добавить(Символ(8221));
	ПлохиеКавычки.Добавить(Символ(171));
	ПлохиеКавычки.Добавить(Символ(187));

	Для Каждого ПлохаяКавычка Из ПлохиеКавычки Цикл	
		СтрокаВерсии.Комментарий = СтрЗаменить(СтрокаВерсии.Комментарий, ПлохаяКавычка, ХорошаяКавычка);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Автор(СтрокаВерсии)

	Если ВыводитьПредставление Тогда

		Возврат СтрокаВерсии.ПредставлениеАвтора;

	Иначе

		Возврат СтрокаВерсии.Автор;

	КонецЕсли;

КонецФункции

#КонецОбласти

Процедура Инициализация()

	ВерсияПлагина = "1.3.1";
	Лог = Логирование.ПолучитьЛог(ИмяЛога());
	КомандыПлагина = Новый Массив;
	КомандыПлагина.Добавить("sync");

КонецПроцедуры

Инициализация();
